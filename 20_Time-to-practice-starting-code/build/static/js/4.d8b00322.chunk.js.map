{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetails","params","match","useRouteMatch","getSingleQuote","loadedQuote","classNam","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/4.d8b00322.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2YFh4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3eoJC\",\"loading\":\"NewCommentForm_loading__iDsUV\",\"control\":\"NewCommentForm_control__BcxX8\",\"actions\":\"NewCommentForm_actions__3VSeh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2w0Jv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__PBe-H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__Ry9QS\"};","import { useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { addComment } from '../../lib/api';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\n\r\nimport classes from './NewCommentForm.module.css';\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n\r\n  const {onAddedComment} = props;\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed' && !error) {\r\n      onAddedComment();\r\n    }\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredText = commentTextRef.current.value;\r\n    // optional: Could validate here\r\n\r\n    sendRequest({ commentData: {text: enteredText }, quoteId: props.quoteId });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === 'pending' && (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor='comment'>Your Comment</label>\r\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className='btn'>Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","import classes from './CommentItem.module.css';\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n","import CommentItem from './CommentItem';\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul className={classes.comments}>\r\n      {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport classes from './Comments.module.css';\r\nimport NewCommentForm from './NewCommentForm';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getAllComments } from '../../lib/api';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport CommentsList from './CommentsList';\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [quoteId, sendRequest]);\r\n\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  const addedCommentHandler = useCallback(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  let comments;\r\n\r\n  if (status === 'pending') {\r\n    comments = (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status === 'completed' && (loadedComments && loadedComments.length)) {\r\n    comments = (\r\n      <CommentsList comments={loadedComments} />\r\n    )\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\r\n    comments = (\r\n      <p className='centered'>No comments added yet</p>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className='btn' onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\r\n      {comments}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote = (props) => {\r\n  return (\r\n    <figure className={classes.quote}>\r\n      <p>{props.text}</p>\r\n      <figcaption>{props.author}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default HighlightedQuote;\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetails = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, status, data: loadedQuote, error  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <p classNam='centered'>\r\n        {error}\r\n      </p>\r\n    )\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  console.log(params.quoteId);\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          <Link className='btn--flat' to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;"],"sourceRoot":""}